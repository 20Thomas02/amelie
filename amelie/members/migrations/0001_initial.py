# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2019-03-25 22:00
from __future__ import unicode_literals

import amelie.claudia.mappable
import amelie.tools.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Association',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Association',
                'ordering': ['name'],
                'verbose_name_plural': 'Associations',
            },
        ),
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('abbreviation', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9.-]*$', 'You can only enter ^[a-zA-Z0-9.-]*$.', 'Invalid account name'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(20)], verbose_name='Abbreviation')),
                ('slug', models.SlugField(editable=False, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail address')),
                ('founded', models.DateField(auto_now_add=True, verbose_name='Started on')),
                ('abolished', models.DateField(blank=True, null=True, verbose_name='Ended on')),
                ('website', models.URLField(blank=True, verbose_name='Web site')),
                ('information_nl', models.TextField(verbose_name='Information')),
                ('information_en', models.TextField(verbose_name='Information (en)')),
                ('private_email', models.BooleanField(default=False, help_text='The e-mail address of this committee is not displayed on the website', verbose_name='E-mail address is private')),
                ('superuser', models.BooleanField(default=False, help_text='Members of this committee are granted board authorities on this web site', verbose_name='Is board')),
                ('gitlab', models.BooleanField(default=False, help_text='Members of this committee get access to GitLab', verbose_name='Create GitLab group')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos')),
                ('group_picture', models.ImageField(blank=True, null=True, upload_to='committeeGroupPictures')),
                ('ledger_account_number', models.CharField(default='2500', max_length=8, verbose_name='ledger account')),
            ],
            options={
                'verbose_name': 'Committee',
                'ordering': ['name'],
                'verbose_name_plural': 'Committees',
            },
            bases=(models.Model, amelie.claudia.mappable.Mappable),
        ),
        migrations.CreateModel(
            name='CommitteeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('slug', models.SlugField(editable=False)),
            ],
            options={
                'verbose_name': 'Committee category',
                'ordering': ['name'],
                'verbose_name_plural': 'Committee categories',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('abbreviation', models.CharField(max_length=10, verbose_name='Abbreviation')),
                ('type', models.CharField(choices=[('researchgroup', 'Chair'), ('service', 'Service')], max_length=15, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Department',
                'ordering': ['name'],
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Dogroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Dogroup',
                'ordering': ['name'],
                'verbose_name_plural': 'Introduction groups',
            },
        ),
        migrations.CreateModel(
            name='DogroupGeneration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generation', models.PositiveIntegerField(verbose_name='Generation')),
                ('mail_alias', models.EmailField(max_length=254, verbose_name='Mailalias')),
                ('dogroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Dogroup', verbose_name='Dogroup')),
            ],
            options={
                'verbose_name': 'Introduction group generation',
                'ordering': ['generation', 'dogroup'],
                'verbose_name_plural': 'Introduction group generations',
            },
            bases=(models.Model, amelie.claudia.mappable.Mappable),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, null=True, unique=True, validators=[django.core.validators.MinValueValidator(7640000), django.core.validators.MaxValueValidator(9999999)], verbose_name='Employee number')),
                ('end', models.DateField(blank=True, null=True, verbose_name='End')),
            ],
            options={
                'verbose_name': 'Employee',
                'ordering': ['number'],
                'verbose_name_plural': 'Employees',
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('abbreviation', models.CharField(max_length=10, verbose_name='Abbreviation')),
            ],
            options={
                'verbose_name': 'Faculty',
                'ordering': ['name'],
                'verbose_name_plural': 'Faculties',
            },
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function', models.CharField(max_length=75, verbose_name='Position')),
                ('note', models.TextField(blank=True, verbose_name='Remarks')),
                ('begin', models.DateField(verbose_name='Started on')),
                ('end', models.DateField(blank=True, null=True, verbose_name='Ended on')),
                ('committee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Committee', verbose_name='Committee')),
            ],
            options={
                'verbose_name': 'Position',
                'ordering': ['end', '-begin', 'person'],
                'verbose_name_plural': 'Funcions',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='Year')),
                ('ended', models.DateField(blank=True, null=True, verbose_name='Ended preliminary')),
            ],
            options={
                'verbose_name': 'Membership',
                'ordering': ['member', 'year'],
                'verbose_name_plural': 'Memberships',
            },
        ),
        migrations.CreateModel(
            name='MembershipType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nl', models.CharField(max_length=30, unique=True, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=30, verbose_name='Name (en)')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Price')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Membership type',
                'ordering': ['description'],
                'verbose_name_plural': 'Membership types',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True, verbose_name='Date')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Price')),
                ('membership', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='members.Membership', verbose_name='Membership')),
            ],
            options={
                'verbose_name': 'Payment',
                'ordering': ['date'],
                'verbose_name_plural': 'Payments',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Way of payment',
                'ordering': ['description'],
                'verbose_name_plural': 'Ways of payment',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='First name')),
                ('last_name_prefix', models.CharField(blank=True, max_length=25, verbose_name='Last name pre-fix')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last name')),
                ('initials', models.CharField(blank=True, max_length=20, verbose_name='Initials')),
                ('slug', models.SlugField(editable=False)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='pasfoto/', verbose_name='Photo')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('gender', models.CharField(choices=[('Unknown', 'Unknown'), ('Man', 'Man'), ('Woman', 'Woman'), ('Other', 'Other')], max_length=9, verbose_name='Gender')),
                ('preferred_language', models.CharField(choices=[('nl', 'Dutch'), ('en', 'English')], default='nl', max_length=100, verbose_name='Language of preference')),
                ('international_member', models.CharField(choices=[('Yes', 'Yes, I am an international student.'), ('No', 'No, I am not an international student.'), ('Unknown', "I would rather not say if I'm an international student or not.")], max_length=16, verbose_name='International student')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Birth date')),
                ('email_address', models.EmailField(max_length=254, null=True, verbose_name='E-mail address')),
                ('address', models.CharField(max_length=50, verbose_name='Address')),
                ('postal_code', models.CharField(max_length=8, verbose_name='Postal code')),
                ('city', models.CharField(max_length=30, verbose_name='City')),
                ('country', models.CharField(default='Nederland', max_length=25, verbose_name='Country')),
                ('telephone', models.CharField(blank=True, max_length=20, verbose_name='Phonenumber')),
                ('email_address_parents', models.EmailField(blank=True, max_length=254, verbose_name='E-mail address of parent(s)/guardian(s)')),
                ('address_parents', models.CharField(blank=True, max_length=50, verbose_name='Address of parent(s)/guardian(s)')),
                ('postal_code_parents', models.CharField(blank=True, max_length=8, verbose_name='Postal code of parent(s)/guardian(s)')),
                ('city_parents', models.CharField(blank=True, max_length=30, verbose_name='Residence of parent(s)/guardian(s)')),
                ('country_parents', models.CharField(blank=True, default='Nederland', max_length=25, verbose_name='Country of parent(s)/guardian(s)')),
                ('can_use_parents_address', models.BooleanField(default=False, verbose_name="My parents' address details may be used for the parents day.")),
                ('account_name', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator('^[a-z]*$', 'You can only enter ^[a-z]*$.', 'Invalid account name'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(20)], verbose_name='Account name')),
                ('shell', models.CharField(choices=[('default', 'No preference'), ('bash', 'Bash'), ('zsh', 'Z shell')], default='default', max_length=10, verbose_name='Unix shell')),
                ('webmaster', models.BooleanField(default=False, verbose_name='Is web master')),
                ('password_reset_code', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Password reset code')),
                ('password_reset_expiry', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Password reset code expiry')),
            ],
            options={
                'verbose_name': 'Person',
                'ordering': ['last_name'],
                'verbose_name_plural': 'People',
            },
            bases=(models.Model, amelie.claudia.mappable.Mappable),
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
                ('preference_nl', models.CharField(max_length=200, verbose_name='Preference')),
                ('preference_en', models.CharField(max_length=200, verbose_name='Preference(s)')),
                ('default', models.BooleanField(default=False, verbose_name='Standard')),
                ('adjustable', models.BooleanField(default=False, verbose_name='Adjustable by the user in profile')),
                ('first_time', models.BooleanField(default=False, verbose_name='Adjustable by the user on login')),
                ('print', models.BooleanField(default=False, verbose_name='Print')),
            ],
            options={
                'verbose_name': 'Preference',
                'ordering': ['name', 'preference_nl'],
                'verbose_name_plural': 'Preference',
            },
        ),
        migrations.CreateModel(
            name='PreferenceCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Category of preference')),
            ],
            options={
                'verbose_name': 'Category of preference',
                'verbose_name_plural': 'Categories of preference',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(blank=True, null=True, unique=True, validators=[amelie.tools.validators.CheckDigitValidator(7), django.core.validators.MaxValueValidator(9999999)], verbose_name='Student number')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='Person')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nl', models.CharField(max_length=100, verbose_name='Name')),
                ('name_en', models.CharField(blank=True, max_length=100, verbose_name='Name (en)')),
                ('abbreviation', models.CharField(max_length=10, verbose_name='Abbreviation')),
                ('type', models.CharField(choices=[('BSc', 'Bachelor of Science'), ('MSc', 'Master of Science'), ('Ir', 'Ingenieur')], max_length=3, verbose_name='Type')),
                ('length', models.IntegerField(verbose_name='Course length')),
                ('primary_study', models.BooleanField(default=False, help_text='Indicates that this study is one of our primary studies', verbose_name='Primary study')),
                ('active', models.BooleanField(default=True, help_text='Make a study inactive when the study is not given any more on the University of Twente', verbose_name='Active')),
                ('faculties', models.ManyToManyField(to='members.Faculty', verbose_name='Faculties')),
            ],
            options={
                'verbose_name': 'Course',
                'ordering': ['abbreviation'],
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='StudyPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin', models.DateField(verbose_name='Begin')),
                ('end', models.DateField(blank=True, null=True, verbose_name='End')),
                ('graduated', models.BooleanField(default=False, verbose_name='Has graduated')),
                ('dogroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='members.DogroupGeneration', verbose_name='Dogroup')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Student', verbose_name='Student')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Study', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Study period',
                'verbose_name_plural': 'Study periods',
            },
        ),
        migrations.AddField(
            model_name='preference',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.PreferenceCategory'),
        ),
        migrations.AddField(
            model_name='person',
            name='preferences',
            field=models.ManyToManyField(blank=True, to='members.Preference', verbose_name='Preferences'),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.PaymentType', verbose_name='Payment'),
        ),
        migrations.AddField(
            model_name='membership',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='Member'),
        ),
        migrations.AddField(
            model_name='membership',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.MembershipType', verbose_name='Type'),
        ),
        migrations.AddField(
            model_name='function',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='Person'),
        ),
        migrations.AddField(
            model_name='employee',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='Person'),
        ),
        migrations.AddField(
            model_name='dogroupgeneration',
            name='parents',
            field=models.ManyToManyField(to='members.Person', verbose_name='Introduction parents'),
        ),
        migrations.AddField(
            model_name='dogroupgeneration',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Study', verbose_name='Course'),
        ),
        migrations.AddField(
            model_name='department',
            name='faculty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='members.Faculty', verbose_name='Faculty'),
        ),
        migrations.AddField(
            model_name='committee',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='members.CommitteeCategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='committee',
            name='parent_committees',
            field=models.ManyToManyField(blank=True, to='members.Committee', verbose_name='Parent committees'),
        ),
        migrations.AddField(
            model_name='association',
            name='studies',
            field=models.ManyToManyField(blank=True, to='members.Study', verbose_name='Courses'),
        ),
    ]
