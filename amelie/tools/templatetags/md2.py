"""
**DEPRECATED**, use md instead.

Markdown2 filter, requires the python-markdown2 library from
https://code.google.com/p/python-markdown2

This code is based on django's markup contrib.
"""

from django import template
from django.conf import settings
from django.utils.encoding import force_str
from django.utils.safestring import mark_safe

register = template.Library()


def markdown2(value, arg=''):
    """
    Runs Markdown over a given value, optionally using various
    extensions python-markdown supports.

    Syntax::

        {{ value|markdown2:"extension1_name,extension2_name..." }}

    To enable safe mode, which strips raw HTML and only returns HTML
    generated by actual Markdown syntax, pass "safe" as the first
    extension in the list.

    If the version of Markdown in use does not support extensions,
    they will be silently ignored.

    """
    try:
        import markdown2
        import bleach
    except ImportError:
        if settings.DEBUG:
            raise template.TemplateSyntaxError("Error in {% markdown %} filter: The python-markdown2 library isn't installed.")
        return force_str(value)
    else:
        extras = (e.strip() for e in arg.split(','))
        extras = [e for e in extras if e]

        """
        This is slightly tweaked. By default markdown will be parsed in the 'safe' way.
        With 'unsafe' as the first argument, HTML is also parsed. With 'safe' as the first argument
        it will be ignored silently to preserve backwards compatibility.
        """
        if len(extras) > 0 and extras[0] == "unsafe":
            extras = extras[1:]
            safe_mode = False
        elif len(extras) > 0 and extras[0] == "safe":
            extras = extras[1:]
            safe_mode = True
        else:
            safe_mode = True

        if safe_mode:
            value = bleach.clean(value, tags=[], attributes={})

        return mark_safe(markdown2.markdown(force_str(value), extras=extras))


markdown2.is_safe = True
register.filter(markdown2)
