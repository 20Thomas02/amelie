# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2019-03-25 22:00
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import localflavor.generic.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('members', '0001_initial'),
        ('calendar', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amendment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='date')),
                ('previous_iban', localflavor.generic.models.IBANField(blank=True, max_length=34, verbose_name='previous IBAN')),
                ('previous_bic', localflavor.generic.models.BICField(blank=True, max_length=11, verbose_name='previous BIC')),
                ('other_bank', models.BooleanField(default=False, verbose_name='other bank')),
                ('reason', models.CharField(help_text='Short description of the reason for the amendment', max_length=250, verbose_name='remark')),
            ],
            options={
                'verbose_name': 'amendment',
                'ordering': ['date'],
                'verbose_name_plural': 'amendments',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nl', models.CharField(max_length=50, verbose_name='Name')),
                ('name_en', models.CharField(max_length=50, verbose_name='Name (en)')),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Price')),
                ('is_available', models.BooleanField(default=False, verbose_name='Available')),
                ('image', models.ImageField(blank=True, max_length=255, upload_to='cookie_corner', verbose_name='Image')),
                ('kcal', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='kCal')),
            ],
            options={
                'verbose_name': 'Article',
                'ordering': ['name_nl'],
                'verbose_name_plural': 'Articles',
            },
        ),
        migrations.CreateModel(
            name='Authorization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iban', localflavor.generic.models.IBANField(blank=True, max_length=34, verbose_name='IBAN')),
                ('bic', localflavor.generic.models.BICField(blank=True, max_length=11, verbose_name='BIC')),
                ('account_holder_name', models.CharField(blank=True, max_length=70, validators=[django.core.validators.RegexValidator(message='Only alphanumerical signs are allowed', regex="^[a-zA-Z0-9/-?:().,\\'+ ]*$")], verbose_name='account holder')),
                ('start_date', models.DateField(verbose_name='startdate')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='enddate')),
                ('is_signed', models.BooleanField(default=False, verbose_name='has been signed')),
            ],
            options={
                'verbose_name': 'mandate',
                'ordering': ['person', 'start_date'],
                'verbose_name_plural': 'mandates',
            },
        ),
        migrations.CreateModel(
            name='AuthorizationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nl', models.CharField(max_length=50, verbose_name='name')),
                ('name_en', models.CharField(blank=True, max_length=50, verbose_name='name (en)')),
                ('text_nl', models.TextField(verbose_name='text')),
                ('text_en', models.TextField(blank=True, verbose_name='text (en)')),
                ('active', models.BooleanField(default=False, verbose_name='active')),
                ('contribution', models.BooleanField(default=False, verbose_name='membership fee')),
                ('consumptions', models.BooleanField(default=False, verbose_name='consumptions')),
                ('activities', models.BooleanField(default=False, verbose_name='activities')),
                ('other_payments', models.BooleanField(default=False, verbose_name='other payments')),
            ],
            options={
                'verbose_name': 'type of mandate',
                'ordering': ['name_nl'],
                'verbose_name_plural': 'types of mandate',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nl', models.CharField(max_length=50, verbose_name='Name')),
                ('name_en', models.CharField(max_length=50, verbose_name='Name (en)')),
                ('is_available', models.BooleanField(default=False, verbose_name='Available')),
                ('image', models.ImageField(blank=True, max_length=255, upload_to='cookie_corner', verbose_name='Image')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Sequence')),
            ],
            options={
                'verbose_name': 'Category',
                'ordering': ['order', 'name_nl'],
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='DebtCollectionAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=50, verbose_name='description')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='begin')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='end')),
            ],
            options={
                'verbose_name': 'Direct withdrawal-task',
                'ordering': ['-created_on'],
                'verbose_name_plural': 'Direct withdrawal-tasks',
            },
        ),
        migrations.CreateModel(
            name='DebtCollectionBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_date', models.DateField(verbose_name='date of execution')),
                ('sequence_type', models.CharField(choices=[('FRST', 'First collection'), ('RCUR', 'Continuation of direct withdrawal'), ('FNAL', 'Last collection'), ('OOFF', 'One-time direct withdrawal')], max_length=4, verbose_name='sequence type')),
                ('status', models.CharField(choices=[('N', 'New'), ('V', 'Processed'), ('W', 'Declined'), ('A', 'Cancelled')], max_length=1, verbose_name='status')),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='batches', to='personal_tab.DebtCollectionAssignment', verbose_name='assignment')),
            ],
            options={
                'verbose_name': 'direct withdrawal-batch',
                'ordering': ['assignment', 'execution_date'],
                'verbose_name_plural': 'direct withdrawal-batches',
            },
        ),
        migrations.CreateModel(
            name='DebtCollectionInstruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end_to_end_id', models.CharField(max_length=35, validators=[django.core.validators.RegexValidator(message='Only alphanumerical signs are allowed', regex="^[a-zA-Z0-9/-?:().,\\'+ ]*$")], verbose_name='end-to-end-id')),
                ('description', models.CharField(max_length=140, validators=[django.core.validators.RegexValidator(message='Only alphanumerical signs are allowed', regex="^[a-zA-Z0-9/-?:().,\\'+ ]*$")], verbose_name='description')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='amount')),
                ('amendment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='instruction', to='personal_tab.Amendment', verbose_name='amendment')),
                ('authorization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instructions', to='personal_tab.Authorization', verbose_name='mandate')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instructions', to='personal_tab.DebtCollectionBatch', verbose_name='batch')),
            ],
            options={
                'verbose_name': 'direct withdrawal-instruction',
                'ordering': ['batch', 'authorization'],
                'verbose_name_plural': 'direct withdrawal-instructions',
            },
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='amount')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
            ],
            options={
                'verbose_name': 'discount',
                'ordering': ['-date'],
                'verbose_name_plural': 'discounts',
            },
        ),
        migrations.CreateModel(
            name='DiscountCredit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='amount')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='description')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='added on')),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='members.Person', verbose_name='added by')),
                ('discount', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='personal_tab.Discount', verbose_name='discount')),
            ],
            options={
                'verbose_name': 'Discount balance',
                'ordering': ['-date', '-added_on'],
                'verbose_name_plural': 'discount balances',
            },
        ),
        migrations.CreateModel(
            name='DiscountPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin', models.DateTimeField(verbose_name='begin')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='end')),
                ('description_nl', models.CharField(max_length=200, verbose_name='description')),
                ('description_en', models.CharField(blank=True, max_length=200, verbose_name='description (en)')),
                ('ledger_account_number', models.CharField(default='2500', max_length=8, verbose_name='ledger account')),
                ('balance_account_number', models.CharField(default='2500', max_length=8, verbose_name='balance account number')),
                ('articles', models.ManyToManyField(blank=True, related_name='discount_periods', to='personal_tab.Article', verbose_name='articles')),
            ],
            options={
                'verbose_name': 'discount offer',
                'ordering': ['-begin', '-end'],
                'verbose_name_plural': 'discount offers',
            },
        ),
        migrations.CreateModel(
            name='LedgerAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('ledger_account_number', models.CharField(default='2500', max_length=8, verbose_name='ledger account')),
            ],
            options={
                'verbose_name': 'General ledger account',
                'ordering': ['name'],
                'verbose_name_plural': 'General ledger accounts',
            },
        ),
        migrations.CreateModel(
            name='Reversal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Fill out processing date, not rent date. See Rabobank Internet Banking.', verbose_name='Processing date')),
                ('pre_settlement', models.BooleanField(default=False, help_text='A debit reversal is pre-settlement when the withdrawal happens before the crediting of the direct withdrawal has taken place.', verbose_name='pre-settlement')),
                ('reason', models.CharField(choices=[('AC01', 'AC01 - IncorrectAccountNumber'), ('AC04', 'AC04 - ClosedAccountNumber'), ('AC06', 'AC06 - BlockedAccount'), ('AC13', 'AC13 - InvalidDebtorAccountType'), ('AG01', 'AG01 - TransactionForbidden'), ('AG02', 'AG02 - InvalidBankOperationCode'), ('AGNT', 'AGNT - IncorrectAgent'), ('AM04', 'AM04 - InsufficientFunds'), ('AM05', 'AM05 - Duplication'), ('BE05', 'BE05 - UnrecognisedInitiatingParty'), ('CURR', 'CURR - IncorrectCurrency'), ('CUST', 'CUST - RequestedByCustomer'), ('DNOR', 'DNOR - Debtor Bank is not registered under this BIC in the CSM'), ('DUPL', 'DUPL - DuplicatePayment'), ('FF01', 'FF01 - InvalidFileFormat'), ('FF05', 'FF05 - InvalidLocalInstrumentCode'), ('MD01', 'MD01 - NoMandate'), ('MD02', 'MD02 - MissingMandatoryInformationInMandate'), ('MD06', 'MD06 - RefundRequestByEndCustomer'), ('MD07', 'MD07 - EndCustomerDeceased'), ('MS02', 'MS02 - NotSpecifiedReasonCustomerGenerated'), ('MS03', 'MS03 - NotSpecifiedReasonAgentGenerated'), ('RC01', 'RC01 - BankIdentifierIncorrect'), ('RR01', 'RR01 - Missing Debtor Account or Identification'), ('RR02', 'RR02 - Missing Debtor Name or Address'), ('RR03', 'RR03 - Missing Creditor Name or Address'), ('RR04', 'RR04 - Regulatory Reason'), ('SL01', 'SL01 - Specific Service offered by Debtor Agent')], max_length=4, verbose_name='reason')),
                ('instruction', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='reversal', to='personal_tab.DebtCollectionInstruction', verbose_name='instruction')),
            ],
            options={
                'verbose_name': 'debit reversal',
                'ordering': ['date'],
                'verbose_name_plural': 'reversal',
            },
        ),
        migrations.CreateModel(
            name='RFIDCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Rfid code')),
                ('active', models.BooleanField(default=False, verbose_name='Activated')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='Person')),
            ],
            options={
                'verbose_name': 'RFID card',
                'ordering': ['code'],
                'verbose_name_plural': 'RFID cards',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='Price')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='Added on')),
            ],
            options={
                'verbose_name': 'Transaction',
                'ordering': ['-date', '-added_on'],
                'verbose_name_plural': 'Transactions',
            },
        ),
        migrations.CreateModel(
            name='ActivityTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personal_tab.Transaction')),
                ('with_enrollment_options', models.BooleanField(default=False, verbose_name='More sign up options')),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='calendar.Event', verbose_name='Activities')),
                ('participation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='calendar.Participation', verbose_name='Enrollment')),
            ],
            bases=('personal_tab.transaction',),
        ),
        migrations.CreateModel(
            name='AlexiaTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personal_tab.Transaction')),
                ('transaction_id', models.PositiveIntegerField(verbose_name='Transaction id')),
            ],
            bases=('personal_tab.transaction',),
        ),
        migrations.CreateModel(
            name='ContributionTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personal_tab.Transaction')),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='members.Membership', verbose_name='Membership')),
            ],
            bases=('personal_tab.transaction',),
        ),
        migrations.CreateModel(
            name='CookieCornerTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personal_tab.Transaction')),
                ('amount', models.PositiveIntegerField(verbose_name='Amount')),
            ],
            bases=('personal_tab.transaction',),
        ),
        migrations.CreateModel(
            name='CustomTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personal_tab.Transaction')),
            ],
            bases=('personal_tab.transaction',),
        ),
        migrations.CreateModel(
            name='DebtCollectionTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personal_tab.Transaction')),
            ],
            bases=('personal_tab.transaction',),
        ),
        migrations.CreateModel(
            name='ReversalTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='personal_tab.Transaction')),
                ('reversal', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='transaction', to='personal_tab.Reversal', verbose_name='debit reversal')),
            ],
            bases=('personal_tab.transaction',),
        ),
        migrations.AddField(
            model_name='transaction',
            name='added_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='members.Person', verbose_name='Added by'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='debt_collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='personal_tab.DebtCollectionInstruction', verbose_name='Direct withdrawal'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='discount',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='personal_tab.Discount', verbose_name='discount'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='Person'),
        ),
        migrations.AddField(
            model_name='discountcredit',
            name='discount_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='personal_tab.DiscountPeriod', verbose_name='discount offer'),
        ),
        migrations.AddField(
            model_name='discountcredit',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='person'),
        ),
        migrations.AddField(
            model_name='discount',
            name='discount_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='personal_tab.DiscountPeriod', verbose_name='discount offer'),
        ),
        migrations.AddField(
            model_name='authorization',
            name='authorization_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='personal_tab.AuthorizationType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='authorization',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='members.Person', verbose_name='person'),
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='personal_tab.Category', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='article',
            name='ledger_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='personal_tab.LedgerAccount', verbose_name='General ledger account'),
        ),
        migrations.AddField(
            model_name='amendment',
            name='authorization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='amendments', to='personal_tab.Authorization', verbose_name='mandate'),
        ),
        migrations.AddField(
            model_name='cookiecornertransaction',
            name='article',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='personal_tab.Article', verbose_name='Article'),
        ),
    ]
